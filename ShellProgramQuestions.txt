Shell Program Questions

Is your problem a class or a module? What is the difference?

What shell(s) are you using to provide a specification? What features do they support?
We will be taking inspiration mainly from the Bourne Again Shell (bash), and features from the Z Shell.

In your opinion, which features are essential (should include in your design) and which are “window dressing” (should not include in your design)?

Essential Features:
	- Privilege checking (sudo)
	- Changing directory
	- File operations

Window Dressing Features:
	- 


Economics: Which, if any, essential features will be omitted from your design due to
unmanageable effort requirements?

Error handling? What percentage of code handles functional against potential pitfalls:
In the average commercial program? In your shell program?
If they are radically different, please provide a rationale.

Robustness? How do we make the system bullet-proof? Is Avoiding Core dumps of system
shells important? Especially from a Security viewpoint, remember this dump will give
access to underlying C system code and potentially Linux daemons?

Describe the Ruby exception hierarchy, which classes of exceptions are applicable to this problem?

What is Module Errno? Is it applicable to the problem? Explain your answer! Remember Ruby often wraps C code.

Security? How will we protect the system from tainted objects? Can we trust the user?
Is sand boxing applicable to this problem? Is it feasible to write security contracts?

Should we be using class GetoptLong? Or Regexp? Or shell? Or ....

What environment does a shell run within? Current Directory? Or ....

What features should be user controllable? Prompts? Input and Output channels? Or ....